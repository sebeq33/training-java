package persistence;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.jdbc.datasource.DataSourceUtils;
import org.springframework.stereotype.Component;

import mapper.IResultMapper;
import persistence.querycommands.QueryCommand;

@Component
public class DaoConnection {
    private DataSource ds;

    /**
     * @param ds HikariDatasource
     */
    @Autowired
    public DaoConnection(@Qualifier("dataSource") DataSource ds) {
        this.ds = ds;
    }

    /**
     * @param query the query to execute
     * @return the exact result of the query of type T
     * @param <T> the type of the model to @return
     * @throws SQLException content couldn't be loaded
     */
    public <T> T executeQuery(QueryCommand<T> query) throws SQLException {

        Connection conn = DataSourceUtils.getConnection(ds);
        return query.execute(conn);

    }

    /**
     * @param sql simple select query
     * @param mapper the mapper translating ResultSet to the corresponding Model
     * @param <T> the type of the model to @return
     * @return the model generated by the @mapper from the data return by @sql
     * @throws SQLException content couldn't be loaded
     */
    public <T> T executeSelectQuery(String sql, IResultMapper<T> mapper) throws SQLException {
        QueryCommand<T> query = (Connection c) -> {
            try (Statement s = c.createStatement();) {
                try (ResultSet r = s.executeQuery(sql)) {
                    return mapper.process(r);
                }
            }
        };
        return executeQuery(query);
    }

    /**
     * @param req req
     * @return total number of computer in DB
     * @throws SQLException failed
     */
    public Long getCount(String req) throws SQLException {
        Long size = executeSelectQuery(req, (ResultSet r) -> {
            return (r.next() ? r.getLong(1) : null);
        });
        return size;
    }

}
